//buildscript {
//    repositories {
//        gradlePluginPortal()
//        mavenCentral()
//    }
//}

plugins {
    id 'java-library'
    id "com.github.spotbugs" version "5.0.13" apply false
    id "com.diffplug.spotless" version "6.12.1" apply false
}

import java.text.SimpleDateFormat
def globalVersion = new Version(version)

// configures all sub-projects consistently
subprojects {

    apply plugin: 'java-library'

    apply plugin: 'pmd'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'com.diffplug.spotless'

    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    version = globalVersion
    status = version.status

    java {
        toolchain {
            sourceCompatibility = JavaLanguageVersion.of(11)
            targetCompatibility = JavaLanguageVersion.of(11)
        }
        withJavadocJar()
        withSourcesJar()
    }

    javadoc {
        if(JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    repositories {
        mavenCentral()
    }

    test {
        useJUnitPlatform()
    }

    // common dependencies across all projects
    dependencies {
        implementation "org.projectlombok:lombok:$lombokVersion"
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"

        testImplementation "org.projectlombok:lombok:$lombokVersion"
        testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
        testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
        testImplementation "org.assertj:assertj-core:${assertJVersion}"
    }

    // code quality plugins
    pmd {
        consoleOutput = true
        toolVersion = "6.21.0"
        rulesMinimumPriority = 5
        ruleSets = ["category/java/errorprone.xml", "category/java/bestpractices.xml"]
        threads = 4
    }

    spotless {
        format 'misc', {
            // define the files to apply `misc` to
            target '*.gradle', '*.md', '.gitignore'

            // define the steps to apply to those files
            trimTrailingWhitespace()
            indentWithTabs()
            endWithNewline()
        }

        java {
            googleJavaFormat()
            formatAnnotations()
            removeUnusedImports()
        }
    }
    check.dependsOn "spotlessApply"

    // code quality
    spotbugs {
        effort = "max"
        reportLevel = "medium"
        includeFilter = file("$rootProject.projectDir/spotBugsIncludeFilter.xml")
        excludeFilter = file("$rootProject.projectDir/spotBugsExcludeFilter.xml")
    }

    spotbugsMain {
        reports {
            html {
                required = true
                outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
                stylesheet = 'fancy-hist.xsl'
            }
        }
    }

    check.dependsOn test
    build.dependsOn check

    // publish to Maven Central
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                pom {
                    name = 'StructLog4J'
                    description = 'Structured logging library for Java, based on SLF4J'
                    url = 'https://github.com/jacek99/structlog4j'
                    licenses {
                        license {
                            name = 'MIT'
                            url = 'https://github.com/jacek99/structlog4j/blob/master/LICENSE'
                        }
                    }
                    developers {
                        developer {
                            id = 'jacek99'
                            name = 'Jacek Furmankiewicz'
                            email = 'jacek99@gmail.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com:jacek99/structlog4j.git'
                        developerConnection = 'scm:git:ssh://git@github.com:jacek99/structlog4j.git'
                        url = 'https://github.com/jacek99/structlog4j'
                    }
                }
            }
        }
        repositories {
            mavenCentral()
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }
}

class Version {
    String originalVersion
    String thisVersion
    String status
    Date buildTime

    Version(String versionValue) {
        buildTime = new Date()
        originalVersion = versionValue
        if (originalVersion.endsWith('-SNAPSHOT')) {
            status = 'integration'
            thisVersion = originalVersion.substring(0, originalVersion.length() - 'SNAPSHOT'.length()) + getTimestamp()
        } else {
            status = 'release'
            thisVersion = versionValue
        }
    }

    String getTimestamp() {
        // Convert local file timestamp to UTC
        def format = new SimpleDateFormat('yyyyMMddHHmmss')
        format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')));
        return format.format(buildTime)
    }

    String toString() {
        thisVersion
    }
}